---
import { twMerge } from 'tailwind-merge';
import type { Item } from '~/types';

export interface Props {
  items?: Array<Item>;
  defaultIcon?: string;
  classes?: Record<string, string>;
}

const { items = [], classes = {}, defaultIcon } = Astro.props as Props;

const {
  container: containerClass = '',
  panel: panelClass = '',
  title: titleClass = '',
  description: descriptionClass = '',
  icon: defaultIconClass = 'text-primary dark:text-slate-200 border-primary dark:border-blue-700',
} = classes;
---

{
  items && items.length && (
    <div class={`${containerClass} grid grid-cols-2 justify-center md:flex md:flex-col`}>
      {items.map(({ title, description, icon, classes: itemClasses = {} }, index = 0) => (
        <div class={twMerge('flex pb-2 ', panelClass, itemClasses?.panel)}>
          <div class="flex flex-col justify-center items-center mr-2">
            <div>
              <div class="flex items-center justify-center">
                {icon && (
                  <img
                    src={icon}
                    class={twMerge('w-12 h-12 p-2 rounded-lg dark:bg-slate-800', defaultIconClass, itemClasses?.icon)}
                  />
                )}
              </div>
            </div>
            {index !== items.length - 1 && <div class="w-px h-full bg-black/10 dark:bg-slate-400/50" />}
          </div>
          <div class={`flex items-center max-w-md ${index !== items.length - 1 ? '' : ''}`}>
            {title && <p class={twMerge('text-xl font-bold', titleClass, itemClasses?.title)} set:html={title} />}
            {description && (
              <p
                class={twMerge('text-muted mt-2', descriptionClass, itemClasses?.description)}
                set:html={description}
              />
            )}
          </div>
        </div>
      ))}
    </div>
  )
}
